/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoMetallbV1beta1BGPAdvertisementSpecIpAddressPoolSelectorsInner } from './ioMetallbV1beta1BGPAdvertisementSpecIpAddressPoolSelectorsInner';
import { IoMetallbV1beta2BGPPeerSpecPasswordSecret } from './ioMetallbV1beta2BGPPeerSpecPasswordSecret';

/**
* BGPPeerSpec defines the desired state of Peer.
*/
export class IoMetallbV1beta2BGPPeerSpec {
    /**
    * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won\'t be set up.
    */
    'bfdProfile'?: string;
    /**
    * Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.
    */
    'connectTime'?: string;
    /**
    * To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.
    */
    'disableMP'?: boolean;
    /**
    * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
    */
    'ebgpMultiHop'?: boolean;
    /**
    * EnableGracefulRestart allows BGP peer to continue to forward data packets along known routes while the routing protocol information is being restored. This field is immutable because it requires restart of the BGP session Supported for FRR mode only.
    */
    'enableGracefulRestart'?: boolean;
    /**
    * Requested BGP hold time, per RFC4271.
    */
    'holdTime'?: string;
    /**
    * Requested BGP keepalive time, per RFC4271.
    */
    'keepaliveTime'?: string;
    /**
    * AS number to use for the local end of the session.
    */
    'myASN': number;
    /**
    * Only connect to this peer on nodes that match one of these selectors.
    */
    'nodeSelectors'?: Array<IoMetallbV1beta1BGPAdvertisementSpecIpAddressPoolSelectorsInner>;
    /**
    * Authentication password for routers enforcing TCP MD5 authenticated sessions
    */
    'password'?: string;
    'passwordSecret'?: IoMetallbV1beta2BGPPeerSpecPasswordSecret;
    /**
    * AS number to expect from the remote end of the session.
    */
    'peerASN': number;
    /**
    * Address to dial when establishing the session.
    */
    'peerAddress': string;
    /**
    * Port to dial when establishing the session.
    */
    'peerPort'?: number;
    /**
    * BGP router ID to advertise to the peer
    */
    'routerID'?: string;
    /**
    * Source address to use when establishing the session.
    */
    'sourceAddress'?: string;
    /**
    * To set if we want to peer with the BGPPeer using an interface belonging to a host vrf
    */
    'vrf'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "bfdProfile",
            "baseName": "bfdProfile",
            "type": "string"
        },
        {
            "name": "connectTime",
            "baseName": "connectTime",
            "type": "string"
        },
        {
            "name": "disableMP",
            "baseName": "disableMP",
            "type": "boolean"
        },
        {
            "name": "ebgpMultiHop",
            "baseName": "ebgpMultiHop",
            "type": "boolean"
        },
        {
            "name": "enableGracefulRestart",
            "baseName": "enableGracefulRestart",
            "type": "boolean"
        },
        {
            "name": "holdTime",
            "baseName": "holdTime",
            "type": "string"
        },
        {
            "name": "keepaliveTime",
            "baseName": "keepaliveTime",
            "type": "string"
        },
        {
            "name": "myASN",
            "baseName": "myASN",
            "type": "number"
        },
        {
            "name": "nodeSelectors",
            "baseName": "nodeSelectors",
            "type": "Array<IoMetallbV1beta1BGPAdvertisementSpecIpAddressPoolSelectorsInner>"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "passwordSecret",
            "baseName": "passwordSecret",
            "type": "IoMetallbV1beta2BGPPeerSpecPasswordSecret"
        },
        {
            "name": "peerASN",
            "baseName": "peerASN",
            "type": "number"
        },
        {
            "name": "peerAddress",
            "baseName": "peerAddress",
            "type": "string"
        },
        {
            "name": "peerPort",
            "baseName": "peerPort",
            "type": "number"
        },
        {
            "name": "routerID",
            "baseName": "routerID",
            "type": "string"
        },
        {
            "name": "sourceAddress",
            "baseName": "sourceAddress",
            "type": "string"
        },
        {
            "name": "vrf",
            "baseName": "vrf",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoMetallbV1beta2BGPPeerSpec.attributeTypeMap;
    }
}

