/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoCertManagerAcmeV1ChallengeSpecIssuerRef } from './ioCertManagerAcmeV1ChallengeSpecIssuerRef';
import { IoCertManagerAcmeV1ChallengeSpecSolver } from './ioCertManagerAcmeV1ChallengeSpecSolver';

export class IoCertManagerAcmeV1ChallengeSpec {
    /**
    * The URL to the ACME Authorization resource that this challenge is a part of.
    */
    'authorizationURL': string;
    /**
    * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a \'wildcard\', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
    */
    'dnsName': string;
    'issuerRef': IoCertManagerAcmeV1ChallengeSpecIssuerRef;
    /**
    * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
    */
    'key': string;
    'solver': IoCertManagerAcmeV1ChallengeSpecSolver;
    /**
    * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
    */
    'token': string;
    /**
    * The type of ACME challenge this resource represents. One of \"HTTP-01\" or \"DNS-01\".
    */
    'type': IoCertManagerAcmeV1ChallengeSpec.TypeEnum;
    /**
    * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
    */
    'url': string;
    /**
    * wildcard will be true if this challenge is for a wildcard identifier, for example \'*.example.com\'.
    */
    'wildcard'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authorizationURL",
            "baseName": "authorizationURL",
            "type": "string"
        },
        {
            "name": "dnsName",
            "baseName": "dnsName",
            "type": "string"
        },
        {
            "name": "issuerRef",
            "baseName": "issuerRef",
            "type": "IoCertManagerAcmeV1ChallengeSpecIssuerRef"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "solver",
            "baseName": "solver",
            "type": "IoCertManagerAcmeV1ChallengeSpecSolver"
        },
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "IoCertManagerAcmeV1ChallengeSpec.TypeEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "wildcard",
            "baseName": "wildcard",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IoCertManagerAcmeV1ChallengeSpec.attributeTypeMap;
    }
}

export namespace IoCertManagerAcmeV1ChallengeSpec {
    export enum TypeEnum {
        Http01 = <any> 'HTTP-01',
        Dns01 = <any> 'DNS-01'
    }
}
