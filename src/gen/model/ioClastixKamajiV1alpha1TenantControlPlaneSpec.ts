/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecAddons } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecAddons';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlane } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlane';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecNetworkProfile } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecNetworkProfile';

export class IoClastixKamajiV1alpha1TenantControlPlaneSpec {
    'addons'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecAddons;
    'controlPlane': IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlane;
    /**
    * DataStore specifies the DataStore that should be used to store the Kubernetes data for the given Tenant Control Plane. When Kamaji runs with the default DataStore flag, all empty values will inherit the default value. By leaving it empty and running Kamaji with no default DataStore flag, it is possible to achieve automatic assignment to a specific DataStore object.  Migration from one DataStore to another backed by the same Driver is possible. See: https://kamaji.clastix.io/guides/datastore-migration/ Migration from one DataStore to another backed by a different Driver is not supported.
    */
    'dataStore'?: string;
    /**
    * DataStoreSchema allows to specify the name of the database (for relational DataStores) or the key prefix (for etcd). This value is optional and immutable. Note that Kamaji currently doesn\'t ensure that DataStoreSchema values are unique. It\'s up to the user to avoid clashes between different TenantControlPlanes. If not set upon creation, Kamaji will default the DataStoreSchema by concatenating the namespace and name of the TenantControlPlane.
    */
    'dataStoreSchema'?: string;
    'kubernetes': IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes;
    'networkProfile'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecNetworkProfile;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "addons",
            "baseName": "addons",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecAddons"
        },
        {
            "name": "controlPlane",
            "baseName": "controlPlane",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlane"
        },
        {
            "name": "dataStore",
            "baseName": "dataStore",
            "type": "string"
        },
        {
            "name": "dataStoreSchema",
            "baseName": "dataStoreSchema",
            "type": "string"
        },
        {
            "name": "kubernetes",
            "baseName": "kubernetes",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes"
        },
        {
            "name": "networkProfile",
            "baseName": "networkProfile",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecNetworkProfile"
        }    ];

    static getAttributeTypeMap() {
        return IoClastixKamajiV1alpha1TenantControlPlaneSpec.attributeTypeMap;
    }
}

