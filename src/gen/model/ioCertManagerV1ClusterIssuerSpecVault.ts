/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoCertManagerV1ClusterIssuerSpecVaultAuth } from './ioCertManagerV1ClusterIssuerSpecVaultAuth';
import { IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef } from './ioCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef';

/**
* Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
*/
export class IoCertManagerV1ClusterIssuerSpecVault {
    'auth': IoCertManagerV1ClusterIssuerSpecVaultAuth;
    /**
    * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
    */
    'caBundle'?: string;
    'caBundleSecretRef'?: IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef;
    /**
    * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    */
    'namespace'?: string;
    /**
    * Path is the mount path of the Vault PKI backend\'s `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".
    */
    'path': string;
    /**
    * Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".
    */
    'server': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "auth",
            "baseName": "auth",
            "type": "IoCertManagerV1ClusterIssuerSpecVaultAuth"
        },
        {
            "name": "caBundle",
            "baseName": "caBundle",
            "type": "string"
        },
        {
            "name": "caBundleSecretRef",
            "baseName": "caBundleSecretRef",
            "type": "IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "server",
            "baseName": "server",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoCertManagerV1ClusterIssuerSpecVault.attributeTypeMap;
    }
}

