/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.23.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoCertManagerV1ClusterIssuerSpecVaultAuth } from './ioCertManagerV1ClusterIssuerSpecVaultAuth';
import { IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef } from './ioCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef';

/**
* Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
*/
export class IoCertManagerV1ClusterIssuerSpecVault {
    'auth': IoCertManagerV1ClusterIssuerSpecVaultAuth;
    /**
    * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the cert-manager controller system root certificates are used to validate the TLS connection.
    */
    'caBundle'?: string;
    'caBundleSecretRef'?: IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef;
    /**
    * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    */
    'namespace'?: string;
    /**
    * Path is the mount path of the Vault PKI backend\'s `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".
    */
    'path': string;
    /**
    * Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".
    */
    'server': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "auth",
            "baseName": "auth",
            "type": "IoCertManagerV1ClusterIssuerSpecVaultAuth"
        },
        {
            "name": "caBundle",
            "baseName": "caBundle",
            "type": "string"
        },
        {
            "name": "caBundleSecretRef",
            "baseName": "caBundleSecretRef",
            "type": "IoCertManagerV1ClusterIssuerSpecVaultCaBundleSecretRef"
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "server",
            "baseName": "server",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoCertManagerV1ClusterIssuerSpecVault.attributeTypeMap;
    }
}

