/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetesKubelet } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecKubernetesKubelet';

/**
* Kubernetes specification for tenant control plane
*/
export class IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes {
    /**
    * List of enabled Admission Controllers for the Tenant cluster. Full reference available here: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers
    */
    'admissionControllers'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes.AdmissionControllersEnum>;
    'kubelet': IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetesKubelet;
    /**
    * Kubernetes Version for the tenant control plane
    */
    'version': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "admissionControllers",
            "baseName": "admissionControllers",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes.AdmissionControllersEnum>"
        },
        {
            "name": "kubelet",
            "baseName": "kubelet",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetesKubelet"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes.attributeTypeMap;
    }
}

export namespace IoClastixKamajiV1alpha1TenantControlPlaneSpecKubernetes {
    export enum AdmissionControllersEnum {
        AlwaysAdmit = <any> 'AlwaysAdmit',
        AlwaysDeny = <any> 'AlwaysDeny',
        AlwaysPullImages = <any> 'AlwaysPullImages',
        CertificateApproval = <any> 'CertificateApproval',
        CertificateSigning = <any> 'CertificateSigning',
        CertificateSubjectRestriction = <any> 'CertificateSubjectRestriction',
        DefaultIngressClass = <any> 'DefaultIngressClass',
        DefaultStorageClass = <any> 'DefaultStorageClass',
        DefaultTolerationSeconds = <any> 'DefaultTolerationSeconds',
        DenyEscalatingExec = <any> 'DenyEscalatingExec',
        DenyExecOnPrivileged = <any> 'DenyExecOnPrivileged',
        DenyServiceExternalIps = <any> 'DenyServiceExternalIPs',
        EventRateLimit = <any> 'EventRateLimit',
        ExtendedResourceToleration = <any> 'ExtendedResourceToleration',
        ImagePolicyWebhook = <any> 'ImagePolicyWebhook',
        LimitPodHardAntiAffinityTopology = <any> 'LimitPodHardAntiAffinityTopology',
        LimitRanger = <any> 'LimitRanger',
        MutatingAdmissionWebhook = <any> 'MutatingAdmissionWebhook',
        NamespaceAutoProvision = <any> 'NamespaceAutoProvision',
        NamespaceExists = <any> 'NamespaceExists',
        NamespaceLifecycle = <any> 'NamespaceLifecycle',
        NodeRestriction = <any> 'NodeRestriction',
        OwnerReferencesPermissionEnforcement = <any> 'OwnerReferencesPermissionEnforcement',
        PersistentVolumeClaimResize = <any> 'PersistentVolumeClaimResize',
        PersistentVolumeLabel = <any> 'PersistentVolumeLabel',
        PodNodeSelector = <any> 'PodNodeSelector',
        PodSecurity = <any> 'PodSecurity',
        PodSecurityPolicy = <any> 'PodSecurityPolicy',
        PodTolerationRestriction = <any> 'PodTolerationRestriction',
        Priority = <any> 'Priority',
        ResourceQuota = <any> 'ResourceQuota',
        RuntimeClass = <any> 'RuntimeClass',
        SecurityContextDeny = <any> 'SecurityContextDeny',
        ServiceAccount = <any> 'ServiceAccount',
        StorageObjectInUseProtection = <any> 'StorageObjectInUseProtection',
        TaintNodesByCondition = <any> 'TaintNodesByCondition',
        ValidatingAdmissionWebhook = <any> 'ValidatingAdmissionWebhook'
    }
}
