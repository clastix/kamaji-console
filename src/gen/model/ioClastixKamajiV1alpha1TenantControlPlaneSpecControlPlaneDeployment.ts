/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.23.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoCertManagerAcmeV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsInner } from './ioCertManagerAcmeV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsInner';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner';

/**
* Defining the options for the deployed Tenant Control Plane as Deployment resource.
*/
export class IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeployment {
    'additionalMetadata'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata;
    'affinity'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity;
    'extraArgs'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs;
    /**
    * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\'s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    */
    'nodeSelector'?: { [key: string]: string; };
    'replicas'?: number;
    'resources'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources;
    /**
    * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run the Tenant Control Plane pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
    */
    'runtimeClassName'?: string;
    /**
    * If specified, the Tenant Control Plane pod\'s tolerations. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    */
    'tolerations'?: Array<IoCertManagerAcmeV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsInner>;
    /**
    * TopologySpreadConstraints describes how the Tenant Control Plane pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. In case of nil underlying LabelSelector, the Kamaji one for the given Tenant Control Plane will be used. All topologySpreadConstraints are ANDed.
    */
    'topologySpreadConstraints'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "additionalMetadata",
            "baseName": "additionalMetadata",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata"
        },
        {
            "name": "affinity",
            "baseName": "affinity",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity"
        },
        {
            "name": "extraArgs",
            "baseName": "extraArgs",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs"
        },
        {
            "name": "nodeSelector",
            "baseName": "nodeSelector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources"
        },
        {
            "name": "runtimeClassName",
            "baseName": "runtimeClassName",
            "type": "string"
        },
        {
            "name": "tolerations",
            "baseName": "tolerations",
            "type": "Array<IoCertManagerAcmeV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsInner>"
        },
        {
            "name": "topologySpreadConstraints",
            "baseName": "topologySpreadConstraints",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner>"
        }    ];

    static getAttributeTypeMap() {
        return IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeployment.attributeTypeMap;
    }
}

