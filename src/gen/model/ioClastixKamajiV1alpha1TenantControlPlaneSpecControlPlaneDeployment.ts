/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecAddonsKonnectivityAgentTolerationsInner } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecAddonsKonnectivityAgentTolerationsInner';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumeMounts } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumeMounts';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumesInner } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumesInner';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentRegistrySettings } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentRegistrySettings';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentStrategy } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentStrategy';
import { IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner } from './ioClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner';

/**
* Defining the options for the deployed Tenant Control Plane as Deployment resource.
*/
export class IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeployment {
    /**
    * AdditionalContainers allows adding additional containers to the Control Plane deployment.
    */
    'additionalContainers'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner>;
    /**
    * AdditionalInitContainers allows adding additional init containers to the Control Plane deployment.
    */
    'additionalInitContainers'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner>;
    'additionalMetadata'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata;
    'additionalVolumeMounts'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumeMounts;
    /**
    * AdditionalVolumes allows to add additional volumes to the Control Plane deployment.
    */
    'additionalVolumes'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumesInner>;
    'affinity'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity;
    'extraArgs'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs;
    /**
    * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\'s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    */
    'nodeSelector'?: { [key: string]: string; };
    'podAdditionalMetadata'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata;
    'registrySettings'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentRegistrySettings;
    'replicas'?: number;
    'resources'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources;
    /**
    * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run the Tenant Control Plane pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
    */
    'runtimeClassName'?: string;
    /**
    * ServiceAccountName allows to specify the service account to be mounted to the pods of the Control plane deployment
    */
    'serviceAccountName'?: string;
    'strategy'?: IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentStrategy;
    /**
    * If specified, the Tenant Control Plane pod\'s tolerations. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    */
    'tolerations'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecAddonsKonnectivityAgentTolerationsInner>;
    /**
    * TopologySpreadConstraints describes how the Tenant Control Plane pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. In case of nil underlying LabelSelector, the Kamaji one for the given Tenant Control Plane will be used. All topologySpreadConstraints are ANDed.
    */
    'topologySpreadConstraints'?: Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "additionalContainers",
            "baseName": "additionalContainers",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner>"
        },
        {
            "name": "additionalInitContainers",
            "baseName": "additionalInitContainers",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalContainersInner>"
        },
        {
            "name": "additionalMetadata",
            "baseName": "additionalMetadata",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata"
        },
        {
            "name": "additionalVolumeMounts",
            "baseName": "additionalVolumeMounts",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumeMounts"
        },
        {
            "name": "additionalVolumes",
            "baseName": "additionalVolumes",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalVolumesInner>"
        },
        {
            "name": "affinity",
            "baseName": "affinity",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAffinity"
        },
        {
            "name": "extraArgs",
            "baseName": "extraArgs",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentExtraArgs"
        },
        {
            "name": "nodeSelector",
            "baseName": "nodeSelector",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "podAdditionalMetadata",
            "baseName": "podAdditionalMetadata",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentAdditionalMetadata"
        },
        {
            "name": "registrySettings",
            "baseName": "registrySettings",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentRegistrySettings"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentResources"
        },
        {
            "name": "runtimeClassName",
            "baseName": "runtimeClassName",
            "type": "string"
        },
        {
            "name": "serviceAccountName",
            "baseName": "serviceAccountName",
            "type": "string"
        },
        {
            "name": "strategy",
            "baseName": "strategy",
            "type": "IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentStrategy"
        },
        {
            "name": "tolerations",
            "baseName": "tolerations",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecAddonsKonnectivityAgentTolerationsInner>"
        },
        {
            "name": "topologySpreadConstraints",
            "baseName": "topologySpreadConstraints",
            "type": "Array<IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeploymentTopologySpreadConstraintsInner>"
        }    ];

    static getAttributeTypeMap() {
        return IoClastixKamajiV1alpha1TenantControlPlaneSpecControlPlaneDeployment.attributeTypeMap;
    }
}

